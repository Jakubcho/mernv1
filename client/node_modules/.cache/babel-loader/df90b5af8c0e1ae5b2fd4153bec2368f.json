{"ast":null,"code":"import { API_URL } from '../config';\nimport axios from 'axios';\nconst reducerName = 'posts';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\nexport const LOAD_POST = createActionName('LOAD_POST');\nexport const ADD_POST = createActionName('ADD_POST');\nexport const START_REQUEST = createActionName('START_REQUEST');\nexport const END_REQUEST = createActionName('END_REQUEST');\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\nexport const SEND_REQUEST = createActionName('SEND_REQUEST');\nexport const LOAD_POSTS_PAGE = createActionName('LOAD_POSTS_PAGE');\nexport const loadPosts = payload => ({\n  payload,\n  type: LOAD_POSTS\n});\nexport const loadPost = payload => ({\n  payload,\n  type: LOAD_POST\n});\nexport const loadPostsByPage = payload => ({\n  payload,\n  type: LOAD_POSTS_PAGE\n});\nexport const getPosts = ({\n  posts\n}) => posts.data;\nexport const getRequest = ({\n  posts\n}) => posts.request;\nexport const getPost = ({\n  posts\n}) => posts.singlePost;\nexport const getPages = ({\n  posts\n}) => Math.ceil(posts.amount / posts.postsPerPage);\nexport const startRequest = () => ({\n  type: START_REQUEST\n});\nexport const endRequest = () => ({\n  type: END_REQUEST\n});\nexport const errorRequest = error => ({\n  error,\n  type: ERROR_REQUEST\n});\nexport const sendRequest = () => ({\n  type: SEND_REQUEST\n});\nconst initialState = {\n  data: [],\n  request: {\n    pending: false,\n    error: null,\n    success: null,\n    send: null\n  },\n  singlePost: {},\n  amount: 0,\n  postsPerPage: 10,\n  presentPage: 1\n};\nexport default function reducer(statePart = initialState, action) {\n  switch (action.type) {\n    case LOAD_POSTS_PAGE:\n      return { ...statePart,\n        postsPerPage: action.payload.postsPerPage,\n        presentPage: action.payload.presentPage,\n        amount: action.payload.amount,\n        data: [...action.payload.posts]\n      };\n\n    case SEND_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: false,\n          error: null,\n          send: true\n        }\n      };\n\n    case LOAD_POST:\n      return { ...statePart,\n        singlePost: action.payload\n      };\n\n    case LOAD_POSTS:\n      return { ...statePart,\n        data: action.payload\n      };\n\n    case START_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: true,\n          error: null,\n          success: null\n        }\n      };\n\n    case END_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: false,\n          error: null,\n          success: true\n        }\n      };\n\n    case ERROR_REQUEST:\n      return { ...statePart,\n        request: {\n          pending: false,\n          error: action.error,\n          success: false\n        }\n      };\n\n    default:\n      return statePart;\n  }\n}\nexport const loadPostsRequest = () => {\n  return async dispatch => {\n    dispatch(startRequest());\n\n    try {\n      let res = await axios.get(`${API_URL}/posts`);\n      dispatch(loadPosts(res.data));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};\nexport const loadPostRequest = id => {\n  return async dispatch => {\n    dispatch(startRequest());\n\n    try {\n      let res = await axios.get(`${API_URL}/posts/${id}`);\n      dispatch(loadPost(res.data));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};\nexport const addPostRequest = post => {\n  return async dispatch => {\n    dispatch(startRequest());\n\n    try {\n      let res = await axios.post(`${API_URL}/posts`, post);\n      dispatch(sendRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};\nexport const loadPostsByPageRequest = (page, numberOfPosts) => {\n  return async dispatch => {\n    dispatch(startRequest());\n\n    try {\n      let postsPerPage = numberOfPosts || 10;\n      const startAt = (page - 1) * postsPerPage;\n      const limit = postsPerPage;\n      let res = await axios.get(`${API_URL}/posts/range/${startAt}/${limit}`);\n      const payload = {\n        posts: res.data.posts,\n        amount: res.data.amount,\n        postsPerPage,\n        presentPage: page\n      };\n      dispatch(loadPostsByPage(payload));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/chola/Desktop/programowanie/MERNv2/client/src/redux/postsRedux.js"],"names":["API_URL","axios","reducerName","createActionName","name","LOAD_POSTS","LOAD_POST","ADD_POST","START_REQUEST","END_REQUEST","ERROR_REQUEST","SEND_REQUEST","LOAD_POSTS_PAGE","loadPosts","payload","type","loadPost","loadPostsByPage","getPosts","posts","data","getRequest","request","getPost","singlePost","getPages","Math","ceil","amount","postsPerPage","startRequest","endRequest","errorRequest","error","sendRequest","initialState","pending","success","send","presentPage","reducer","statePart","action","loadPostsRequest","dispatch","res","get","e","message","loadPostRequest","id","addPostRequest","post","loadPostsByPageRequest","page","numberOfPosts","startAt","limit"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,WAAW,GAAG,OAApB;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,OAAMF,WAAY,IAAGE,IAAK,EAA5D;;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,YAAD,CAAnC;AACP,OAAO,MAAMG,SAAS,GAAGH,gBAAgB,CAAC,WAAD,CAAlC;AACP,OAAO,MAAMI,QAAQ,GAAGJ,gBAAgB,CAAC,UAAD,CAAjC;AACP,OAAO,MAAMK,aAAa,GAAGL,gBAAgB,CAAC,eAAD,CAAtC;AACP,OAAO,MAAMM,WAAW,GAAGN,gBAAgB,CAAC,aAAD,CAApC;AACP,OAAO,MAAMO,aAAa,GAAGP,gBAAgB,CAAC,eAAD,CAAtC;AACP,OAAO,MAAMQ,YAAY,GAAGR,gBAAgB,CAAC,cAAD,CAArC;AACP,OAAO,MAAMS,eAAe,GAAGT,gBAAgB,CAAC,iBAAD,CAAxC;AAGP,OAAO,MAAMU,SAAS,GAAGC,OAAO,KAAK;AAACA,EAAAA,OAAD;AAAUC,EAAAA,IAAI,EAACV;AAAf,CAAL,CAAzB;AACP,OAAO,MAAMW,QAAQ,GAAIF,OAAD,KAAc;AAACA,EAAAA,OAAD;AAAUC,EAAAA,IAAI,EAAET;AAAhB,CAAd,CAAjB;AACP,OAAO,MAAMW,eAAe,GAAGH,OAAO,KAAK;AAACA,EAAAA,OAAD;AAAUC,EAAAA,IAAI,EAAEH;AAAhB,CAAL,CAA/B;AAEP,OAAO,MAAMM,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAaA,KAAK,CAACC,IAApC;AACP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAACF,EAAAA;AAAD,CAAD,KAAaA,KAAK,CAACG,OAAtC;AACP,OAAO,MAAMC,OAAO,GAAG,CAAC;AAACJ,EAAAA;AAAD,CAAD,KAAaA,KAAK,CAACK,UAAnC;AACP,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACN,EAAAA;AAAD,CAAD,KAAaO,IAAI,CAACC,IAAL,CAAUR,KAAK,CAACS,MAAN,GAAaT,KAAK,CAACU,YAA7B,CAA9B;AAEP,OAAO,MAAMC,YAAY,GAAG,OAAO;AAAEf,EAAAA,IAAI,EAAEP;AAAR,CAAP,CAArB;AACP,OAAO,MAAMuB,UAAU,GAAG,OAAO;AAAEhB,EAAAA,IAAI,EAAEN;AAAR,CAAP,CAAnB;AACP,OAAO,MAAMuB,YAAY,GAAGC,KAAK,KAAK;AAAEA,EAAAA,KAAF;AAASlB,EAAAA,IAAI,EAAEL;AAAf,CAAL,CAA1B;AACP,OAAO,MAAMwB,WAAW,GAAG,OAAO;AAACnB,EAAAA,IAAI,EAAEJ;AAAP,CAAP,CAApB;AAGP,MAAMwB,YAAY,GAAG;AACnBf,EAAAA,IAAI,EAAE,EADa;AAEnBE,EAAAA,OAAO,EAAE;AACPc,IAAAA,OAAO,EAAE,KADF;AAEPH,IAAAA,KAAK,EAAE,IAFA;AAGPI,IAAAA,OAAO,EAAE,IAHF;AAIPC,IAAAA,IAAI,EAAE;AAJC,GAFU;AAQnBd,EAAAA,UAAU,EAAE,EARO;AASnBI,EAAAA,MAAM,EAAE,CATW;AAUnBC,EAAAA,YAAY,EAAE,EAVK;AAWnBU,EAAAA,WAAW,EAAE;AAXM,CAArB;AAgBA,eAAe,SAASC,OAAT,CAAiBC,SAAS,GAACN,YAA3B,EAAyCO,MAAzC,EAAgD;AAC7D,UAAOA,MAAM,CAAC3B,IAAd;AACE,SAAKH,eAAL;AACI,aAAO,EAAC,GAAG6B,SAAJ;AACLZ,QAAAA,YAAY,EAAEa,MAAM,CAAC5B,OAAP,CAAee,YADxB;AAELU,QAAAA,WAAW,EAAEG,MAAM,CAAC5B,OAAP,CAAeyB,WAFvB;AAGLX,QAAAA,MAAM,EAAEc,MAAM,CAAC5B,OAAP,CAAec,MAHlB;AAILR,QAAAA,IAAI,EAAE,CAAC,GAAGsB,MAAM,CAAC5B,OAAP,CAAeK,KAAnB;AAJD,OAAP;;AAMJ,SAAKR,YAAL;AACI,aAAO,EAAC,GAAG8B,SAAJ;AAAenB,QAAAA,OAAO,EAAE;AAACc,UAAAA,OAAO,EAAE,KAAV;AAAiBH,UAAAA,KAAK,EAAE,IAAxB;AAA8BK,UAAAA,IAAI,EAAE;AAApC;AAAxB,OAAP;;AACJ,SAAKhC,SAAL;AACI,aAAO,EAAC,GAAGmC,SAAJ;AAAejB,QAAAA,UAAU,EAAEkB,MAAM,CAAC5B;AAAlC,OAAP;;AACJ,SAAKT,UAAL;AACE,aAAO,EAAC,GAAGoC,SAAJ;AAAerB,QAAAA,IAAI,EAAEsB,MAAM,CAAC5B;AAA5B,OAAP;;AACF,SAAKN,aAAL;AACE,aAAO,EAAC,GAAGiC,SAAJ;AAAenB,QAAAA,OAAO,EAAE;AAACc,UAAAA,OAAO,EAAE,IAAV;AAAgBH,UAAAA,KAAK,EAAC,IAAtB;AAA4BI,UAAAA,OAAO,EAAE;AAArC;AAAxB,OAAP;;AACF,SAAK5B,WAAL;AACE,aAAO,EAAC,GAAGgC,SAAJ;AAAenB,QAAAA,OAAO,EAAE;AAACc,UAAAA,OAAO,EAAE,KAAV;AAAiBH,UAAAA,KAAK,EAAC,IAAvB;AAA6BI,UAAAA,OAAO,EAAE;AAAtC;AAAxB,OAAP;;AACF,SAAK3B,aAAL;AACE,aAAO,EAAE,GAAG+B,SAAL;AAAgBnB,QAAAA,OAAO,EAAE;AAAEc,UAAAA,OAAO,EAAE,KAAX;AAAkBH,UAAAA,KAAK,EAAES,MAAM,CAACT,KAAhC;AAAuCI,UAAAA,OAAO,EAAE;AAAhD;AAAzB,OAAP;;AACF;AACE,aAAOI,SAAP;AArBJ;AAuBD;AAGD,OAAO,MAAME,gBAAgB,GAAG,MAAM;AACpC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;;AAEA,QAAI;AAEF,UAAIe,GAAG,GAAG,MAAM5C,KAAK,CAAC6C,GAAN,CAAW,GAAE9C,OAAQ,QAArB,CAAhB;AAEA4C,MAAAA,QAAQ,CAAC/B,SAAS,CAACgC,GAAG,CAACzB,IAAL,CAAV,CAAR;AACAwB,MAAAA,QAAQ,CAACb,UAAU,EAAX,CAAR;AACD,KAND,CAME,OAAMgB,CAAN,EAAS;AACTH,MAAAA,QAAQ,CAACZ,YAAY,CAACe,CAAC,CAACC,OAAH,CAAb,CAAR;AACD;AACF,GAZD;AAaD,CAdM;AAeP,OAAO,MAAMC,eAAe,GAAIC,EAAD,IAAQ;AACrC,SAAO,MAAMN,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;;AAEA,QAAI;AAEF,UAAIe,GAAG,GAAG,MAAM5C,KAAK,CAAC6C,GAAN,CAAW,GAAE9C,OAAQ,UAASkD,EAAG,EAAjC,CAAhB;AAEAN,MAAAA,QAAQ,CAAC5B,QAAQ,CAAC6B,GAAG,CAACzB,IAAL,CAAT,CAAR;AACAwB,MAAAA,QAAQ,CAACb,UAAU,EAAX,CAAR;AACD,KAND,CAME,OAAMgB,CAAN,EAAS;AACTH,MAAAA,QAAQ,CAACZ,YAAY,CAACe,CAAC,CAACC,OAAH,CAAb,CAAR;AACD;AACF,GAZD;AAaD,CAdM;AAeP,OAAO,MAAMG,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO,MAAMR,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;;AAEA,QAAI;AAEF,UAAIe,GAAG,GAAG,MAAM5C,KAAK,CAACmD,IAAN,CAAY,GAAEpD,OAAQ,QAAtB,EAA+BoD,IAA/B,CAAhB;AAEAR,MAAAA,QAAQ,CAACV,WAAW,EAAZ,CAAR;AACD,KALD,CAKE,OAAMa,CAAN,EAAQ;AACRH,MAAAA,QAAQ,CAACZ,YAAY,CAACe,CAAC,CAACC,OAAH,CAAb,CAAR;AACD;AACF,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMK,sBAAsB,GAAG,CAACC,IAAD,EAAOC,aAAP,KAAyB;AAC7D,SAAO,MAAMX,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;;AAEA,QAAI;AAEF,UAAID,YAAY,GAAG0B,aAAa,IAAI,EAApC;AACA,YAAMC,OAAO,GAAG,CAACF,IAAI,GAAG,CAAR,IAAazB,YAA7B;AACA,YAAM4B,KAAK,GAAG5B,YAAd;AAEA,UAAIgB,GAAG,GAAG,MAAM5C,KAAK,CAAC6C,GAAN,CAAW,GAAE9C,OAAQ,gBAAewD,OAAQ,IAAGC,KAAM,EAArD,CAAhB;AAEA,YAAM3C,OAAO,GAAG;AACdK,QAAAA,KAAK,EAAE0B,GAAG,CAACzB,IAAJ,CAASD,KADF;AAEdS,QAAAA,MAAM,EAAEiB,GAAG,CAACzB,IAAJ,CAASQ,MAFH;AAGdC,QAAAA,YAHc;AAIdU,QAAAA,WAAW,EAAEe;AAJC,OAAhB;AAOAV,MAAAA,QAAQ,CAAC3B,eAAe,CAACH,OAAD,CAAhB,CAAR;AACA8B,MAAAA,QAAQ,CAACb,UAAU,EAAX,CAAR;AACD,KAjBD,CAiBE,OAAMgB,CAAN,EAAS;AACTH,MAAAA,QAAQ,CAACZ,YAAY,CAACe,CAAC,CAACC,OAAH,CAAb,CAAR;AACD;AACF,GAvBD;AAwBD,CAzBM","sourcesContent":["import {API_URL} from '../config';\r\nimport axios from 'axios';\r\n\r\n\r\nconst reducerName = 'posts';\r\nconst createActionName = name => `app/${reducerName}/${name}`;\r\n\r\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\r\nexport const LOAD_POST = createActionName('LOAD_POST');\r\nexport const ADD_POST = createActionName('ADD_POST');\r\nexport const START_REQUEST = createActionName('START_REQUEST');\r\nexport const END_REQUEST = createActionName('END_REQUEST');\r\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\r\nexport const SEND_REQUEST = createActionName('SEND_REQUEST');\r\nexport const LOAD_POSTS_PAGE = createActionName('LOAD_POSTS_PAGE');\r\n\r\n\r\nexport const loadPosts = payload => ({payload, type:LOAD_POSTS});\r\nexport const loadPost = (payload) => ({payload, type: LOAD_POST});\r\nexport const loadPostsByPage = payload => ({payload, type: LOAD_POSTS_PAGE});\r\n\r\nexport const getPosts = ({posts}) => posts.data;\r\nexport const getRequest = ({posts}) => posts.request;\r\nexport const getPost = ({posts}) => posts.singlePost;\r\nexport const getPages = ({posts}) => Math.ceil(posts.amount/posts.postsPerPage);\r\n\r\nexport const startRequest = () => ({ type: START_REQUEST });\r\nexport const endRequest = () => ({ type: END_REQUEST });\r\nexport const errorRequest = error => ({ error, type: ERROR_REQUEST });\r\nexport const sendRequest = () => ({type: SEND_REQUEST});\r\n\r\n\r\nconst initialState = {\r\n  data: [],\r\n  request: {\r\n    pending: false,\r\n    error: null,\r\n    success: null,\r\n    send: null\r\n  },\r\n  singlePost: {},\r\n  amount: 0,\r\n  postsPerPage: 10,\r\n  presentPage: 1,\r\n\r\n};\r\n\r\n\r\nexport default function reducer(statePart=initialState, action){\r\n  switch(action.type){\r\n    case LOAD_POSTS_PAGE:\r\n        return {...statePart, \r\n          postsPerPage: action.payload.postsPerPage,\r\n          presentPage: action.payload.presentPage,\r\n          amount: action.payload.amount,\r\n          data: [...action.payload.posts],\r\n        }\r\n    case SEND_REQUEST:\r\n        return {...statePart, request: {pending: false, error: null, send: true}};\r\n    case LOAD_POST:\r\n        return {...statePart, singlePost: action.payload}\r\n    case LOAD_POSTS:\r\n      return {...statePart, data: action.payload};\r\n    case START_REQUEST:\r\n      return {...statePart, request: {pending: true, error:null, success: null}}\r\n    case END_REQUEST:\r\n      return {...statePart, request: {pending: false, error:null, success: true}}\r\n    case ERROR_REQUEST:\r\n      return { ...statePart, request: { pending: false, error: action.error, success: false } };\r\n    default: \r\n      return statePart;\r\n    }\r\n}\r\n\r\n\r\nexport const loadPostsRequest = () => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n    \r\n    try {\r\n\r\n      let res = await axios.get(`${API_URL}/posts`);\r\n     \r\n      dispatch(loadPosts(res.data));\r\n      dispatch(endRequest())\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\nexport const loadPostRequest = (id) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n\r\n      let res = await axios.get(`${API_URL}/posts/${id}`);\r\n\r\n      dispatch(loadPost(res.data)); \r\n      dispatch(endRequest())\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\nexport const addPostRequest = (post) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n    \r\n    try {\r\n\r\n      let res = await axios.post(`${API_URL}/posts`, post);\r\n      \r\n      dispatch(sendRequest());\r\n    } catch(e){\r\n      dispatch(errorRequest(e.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadPostsByPageRequest = (page, numberOfPosts) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n      \r\n      let postsPerPage = numberOfPosts || 10;\r\n      const startAt = (page - 1) * postsPerPage;\r\n      const limit = postsPerPage;\r\n      \r\n      let res = await axios.get(`${API_URL}/posts/range/${startAt}/${limit}`);\r\n      \r\n      const payload = {\r\n        posts: res.data.posts,\r\n        amount: res.data.amount,\r\n        postsPerPage,\r\n        presentPage: page\r\n      }\r\n\r\n      dispatch(loadPostsByPage(payload));\r\n      dispatch(endRequest())\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message))\r\n    }\r\n  } \r\n}"]},"metadata":{},"sourceType":"module"}